  LL1 warning in Statement: identifier is the start of several alternatives
  LL1 warning in IfStatement: "elsif" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in DoWhileStatement: "{" is the start of several alternatives
  LL1 warning in ForStatement: identifier is the start of several alternatives
  LL1 warning in WhilelessStatement: identifier is the start of several alternatives

   1   COMPILER Parva $CN
   2   /* Parva level 1 grammar  - Coco/R for C# (EBNF)
   3      P.D. Terry, Rhodes University, 2003
   4      Grammar only */
   5 
   6   CHARACTERS
   7     lf         = CHR(10) .
   8     backslash  = CHR(92) .
   9     control    = CHR(0) .. CHR(31) .
  10     letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  11                  + "abcdefghijklmnopqrstuvwxyz" .
  12     digit      = "0123456789" .
  13     stringCh   = ANY - '"' - control - backslash .
  14     charCh     = ANY - "'" - control - backslash .
  15     printable  = ANY - control .
  16 
  17   TOKENS
  18     identifier = letter [ { letter | digit } | { letter | digit | "_" } ( letter | digit ) ] .
  19     number     = digit { digit } .
  20     stringLit  = '"' { stringCh | backslash printable } '"' .
  21     charLit    = "'" ( charCh   | backslash printable ) "'" .
  22 
  23   COMMENTS FROM "//" TO lf
  24   COMMENTS FROM "/*" TO "*/"
  25   IGNORE CHR(9) .. CHR(13)
  26 
  27   PRODUCTIONS
  28     Parva             = "void" identifier "(" ")" Block .
  29     Block             = "{" { Statement } "}" .
  30     WhilelessBlock    = "{" { Statement } "}" .
  31     Statement         =   Block | ";"
  32                         | ConstDeclarations | VarDeclarations
  33                         | Assignment | IfStatement | WhileStatement
  34                         | ReturnStatement | HaltStatement
  35                         | ReadStatement | WriteStatement 
  36 						| DoWhileStatement | "break" | "continue" 
  37 						| ForStatement | MultiAssign .
  38 	WhilelessStatement =   WhilelessBlock | ";"
  39                         | ConstDeclarations | VarDeclarations
  40                         | Assignment | IfStatement
  41                         | ReturnStatement | HaltStatement
  42                         | ReadStatement | WriteStatement 
  43 						| DoWhileStatement | "break" | "continue" 
  44 						| ForStatement | MultiAssign .
  45     ConstDeclarations = "const" OneConst { "," OneConst } ";" .
  46     OneConst          = identifier AssignOp Constant .
  47     Constant          =   number | charLit
  48                         | "true" | "false" | "null" .
  49     VarDeclarations   = Type OneVar { "," OneVar } ";" .
  50     OneVar            = identifier [ "=" Expression ] .
  51 	MultiAssign       = Designator { "," Designator } "=" Expression { "," Expression } .
  52     Assignment        = Designator AssignOp Expression ";" .
  53 	ForAssignment     = Designator AssignOp Expression .
  54     Designator        = identifier [ "[" Expression "]" ] .
  55     IfStatement       = "if" "(" Condition ")" Statement { ElseIfExtend } [ ElseExtend ] .
  56 	ElseExtend        = "else" Statement .
  57 	ElseIfExtend      = "elsif" "(" Condition ")" Statement .
  58     WhileStatement    = "while" "(" Condition ")" Statement .
  59 	DoWhileStatement  = "do" ("{" { Statement } "}" | { WhilelessStatement } ) "while" "(" Condition ")" ";" .
  60 	ForStatement      = "for" ( ForAssignment | Expression ) ( "to" | "downto" ) Expression Statement .
  61     ReturnStatement   = "return" ";" .
  62     HaltStatement     = "halt" ";" .
  63     ReadStatement     = "read" "(" ReadElement
  64                                    { "," ReadElement } ")" ";" .
  65     ReadElement       = stringLit | Designator .
  66     WriteStatement    = "write" "(" WriteElement
  67                                     { "," WriteElement } ")" ";" .
  68     WriteElement      = stringLit | Expression .
  69     Condition         = Expression .
  70     Expression        = AddExp [ RelOp AddExp ] .
  71     AddExp            = [ "+" | "-" ] Term { AddOp Term } .
  72     Term              = Factor { MulOp Factor } .
  73     Factor            =   Designator | Constant
  74                         | "new" BasicType "[" Expression "]"
  75                         | "!" Factor | "(" Expression ")" .
  76     Type              = BasicType [ "[]" ] .
  77     BasicType         = "int" | "bool" .
  78 	AssignOp		  = "=" | "+=" | "-=" | "*=" | "/=" .
  79     AddOp             = "+" | "-" | "||" .
  80     MulOp             = "*" | "/" | "&&" | "%" .
  81     RelOp             = "==" | "!=" | "<" | "<=" | ">" | ">=" .
  82   END Parva.

0 errors detected
6 warnings detected
