  Warning: FormalParameters is deletable
  Warning: RepeatBlock is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure

   1 using Library;
   2 using System.Collections.Generic;
   3 
   4 COMPILER Parva $NC
   5 /* Parva level 1 grammar  - Coco/R for C#
   6    P.D. Terry, Rhodes University, 2016
   7    Java/C# operator precedences with short circuit evaluation
   8    Void functions, value parameter passing,
   9    but no globals or value returning functions
  10    int, bool, char types supported
  11    as for Prac 7, CSC 301 2018
  12    2018/09/04 */
  13 
  14   public static bool  // set/used by pragmas or cmd line args
  15     debug    = false,
  16     optimize = false,
  17     listCode = false,
  18     warnings = true;
  19 
  20   const bool
  21     known = true;
  22 
  23   // This next method might better be located in the code
  24   // generator.  Traditionally it has been left in the ATG
  25   // file, but that might change in future years.
  26   //
  27   // Note that while sequences like \n \r and \t result in
  28   // special mappings to lf, cr and tab, other sequences  
  29   // like \x \: and \9 simply map to x, ; and 9 .  
  30   // Most students don't seem to know this!
  31 
  32   static string Unescape(string s) {
  33   /* Replaces escape sequences in s by their Unicode values */
  34     StringBuilder buf = new StringBuilder();
  35     int i = 0;
  36     while (i < s.Length) {
  37       if (s[i] == '\\') {
  38         switch (s[i+1]) {
  39           case '\\': buf.Append('\\'); break;
  40           case '\'': buf.Append('\''); break;
  41           case '\"': buf.Append('\"'); break;
  42           case  'r': buf.Append('\r'); break;
  43           case  'n': buf.Append('\n'); break;
  44           case  't': buf.Append('\t'); break;
  45           case  'b': buf.Append('\b'); break;
  46           case  'f': buf.Append('\f'); break;
  47           default:   buf.Append(s[i+1]); break;
  48         }
  49         i += 2;
  50       }
  51       else {
  52         buf.Append(s[i]);
  53         i++;
  54       }
  55     }
  56     return buf.ToString();
  57   } // Unescape
  58 
  59   // the following is global for expediency (fewer parameters needed)
  60 
  61   static Label mainEntryPoint = new Label(!known);
  62 
  63   static bool IsArith(int type) {
  64     return type == Types.intType || type == Types.charType || type == Types.noType;
  65   } // IsArith
  66 
  67   static bool IsBool(int type) {
  68     return type == Types.boolType || type == Types.noType;
  69   } // IsBool
  70 
  71   static bool IsArray(int type) {
  72     return (type % 2) == 1;
  73   } // IsArray
  74 
  75   static bool Compatible(int typeOne, int typeTwo) {
  76   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  77     return    typeOne == typeTwo
  78            || IsArith(typeOne) && IsArith(typeTwo)
  79            || typeOne == Types.noType || typeTwo == Types.noType
  80            || IsArray(typeOne) && typeTwo == Types.nullType
  81            || IsArray(typeTwo) && typeOne == Types.nullType;
  82   } // Compatible
  83 
  84   static bool Assignable(int typeOne, int typeTwo) {
  85   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  86     return    typeOne == typeTwo
  87            || typeOne == Types.intType && typeTwo == Types.charType
  88            || typeOne == Types.noType || typeTwo == Types.noType
  89            || IsArray(typeOne) && typeTwo == Types.nullType;
  90   } // Assignable
  91 
  92   static bool IsCall(out DesType des) {
  93     Entry entry = Table.Find(la.val);
  94     des = new DesType(entry);
  95     return entry.kind == Kinds.Fun;
  96   } // IsCall
  97 
  98 /* -------------------------------------------------------- */
  99 
 100 CHARACTERS
 101   lf         = CHR(10) .
 102   backslash  = CHR(92) .
 103   control    = CHR(0) .. CHR(31) .
 104   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 105   digit      = "0123456789" .
 106   stringCh   = ANY - '"' - control - backslash .
 107   charCh     = ANY - "'" - control - backslash .
 108   printable  = ANY - control .
 109 
 110 TOKENS
 111   identifier = letter { { "_" } (letter | digit) } .
 112   number     = digit { digit } .
 113   stringLit  = '"' { stringCh | backslash printable } '"' .
 114   charLit    = "'" ( charCh   | backslash printable ) "'" .
 115 
 116 PRAGMAS
 117   CodeOn      = "$C+" .              (. listCode  = true; .)
 118   CodeOff     = "$C-" .              (. listCode  = false; .)
 119   DebugOn     = "$D+" .              (. debug     = true; .)
 120   DebugOff    = "$D-" .              (. debug     = false; .)
 121   StackDump   = "$SD" .              (. if(debug) CodeGen.Stack(); .)
 122   HeapDump    = "$HD" .              (. if(debug) CodeGen.Heap(); .)
 123   TableDump   = "$ST" . (. if(debug)Table.PrintTable(OutFile.StdOut); .)
 124 
 125 COMMENTS FROM "//" TO lf
 126 COMMENTS FROM "/*" TO "*/"
 127 
 128 IGNORE CHR(9) .. CHR(13)
 129 
 130 PRODUCTIONS
 131 
 132   Parva
 133                              (. CodeGen.FrameHeader();
 134 					     // no arguments
 135                                 CodeGen.Call(mainEntryPoint);
 136 						// forward, incomplete
 137                                 CodeGen.LeaveProgram(); .)     						// return to O/S
 138   = {   FuncDeclaration } EOF  (. if 
 139 						(!mainEntryPoint.IsDefined())
 140                          SemError("missing Main function"); .)
 141   .
 142 
 143   FuncDeclaration
 144                        (. StackFrame frame = new StackFrame();
 145                           Entry function = new Entry(); .)
 146   =  "void" Ident<out function.name>  
 147 					(. function.kind = Kinds.Fun;
 148                               function.type = Types.voidType;
 149                               function.nParams = 0;
 150                               function.firstParam = null;
 151 	                  function.entryPoint = new Label(known);
 152                               Table.Insert(function);
 153                               Table.OpenScope(); .)
 154      "(" FormalParameters<function> ")"      
 155 				(. frame.size = CodeGen.headerSize + 
 156 					function.nParams;
 157                    if (function.name.ToUpper().Equals("MAIN")
 158                        && !mainEntryPoint.IsDefined()
 159                        && function.nParams == 0) {
 160                            mainEntryPoint.Here(); } .)
 161      Body<frame>              (. Table.CloseScope(); .)
 162   .
 163 
 164   FormalParameters<Entry func>  (. Entry param; .)
 165   = [ OneParam<out param, func> (. func.firstParam = param; .)
 166       { WEAK "," OneParam<out param, func> }
 167     ] .
 168 
 169   OneParam<out Entry param, Entry func>
 170 					(. param = new Entry();
 171                              param.kind = Kinds.Var;
 172            param.offset = CodeGen.headerSize + func.nParams;
 173                              func.nParams++; .)
 174   =  Type<out param.type>
 175      Ident<out param.name>         (. Table.Insert(param); .)
 176   .
 177 
 178   Body<StackFrame frame> (. Label DSPLabel = new Label(known);
 179                             int sizeMark = frame.size;
 180                             CodeGen.OpenStackFrame(0); .)
 181   =  "{" { Statement<frame> } WEAK "}"       
 182 			(. CodeGen.FixDSP(DSPLabel.Address(), 
 183 				frame.size - sizeMark);
 184                      CodeGen.LeaveVoidFunction(); .)
 185   .
 186 
 187   Statement<StackFrame frame>
 188   =  SYNC (   Block<frame>
 189             | ConstDeclarations
 190             | VarDeclarations<frame>
 191             | AssignmentOrCall
 192             | IfStatement<frame>
 193             | WhileStatement<frame>
 194             | DoWhileStatement<frame>
 195             | RepeatStatement<frame>
 196             | HaltStatement
 197             | ReturnStatement
 198             | ReadStatement
 199             | WriteStatement
 200             | SwitchStatement<frame>
 201             | ";"
 202           ) .
 203 
 204   Block<StackFrame frame>
 205   =                                  (. Table.OpenScope(); .)
 206      "{" { Statement<frame> }
 207      WEAK "}"                        (. Table.CloseScope(); .)
 208   .
 209 
 210   RepeatBlock<StackFrame frame>
 211   =                                  (. Table.OpenScope(); .)
 212      { Statement<frame> }
 213                              (. Table.CloseScope(); .)
 214   .
 215 
 216   ConstDeclarations
 217   = "const" OneConst { WEAK "," OneConst }
 218     WEAK ";"
 219   .
 220 
 221   OneConst                   (. Entry constant = new Entry();
 222                                 ConstRec con; .)
 223   =  Ident<out constant.name> (. constant.kind = Kinds.Con; .)
 224      AssignOp Constant<out con>  
 225 			            (. constant.value = con.value;
 226                                constant.type = con.type;
 227                                Table.Insert(constant); .)
 228   .
 229 
 230   Constant<out ConstRec con>       (. con = new ConstRec(); .)
 231   =   IntConst<out con.value>  (. con.type = Types.intType; .)
 232     | CharConst<out con.value>(. con.type = Types.charType; .)
 233     | "true"                     (. con.type = Types.boolType; 
 234 						    con.value = 1; .)
 235     | "false"                    (. con.type = Types.boolType;
 236 						    con.value = 0; .)
 237     | "null"                     (. con.type = Types.nullType;
 238 						    con.value = 0; .)
 239   .
 240 
 241   VarDeclarations<StackFrame frame>          (. int type; .)
 242   =  Type<out type>
 243      VarList<frame, type>
 244      WEAK ";"
 245   .
 246 
 247   Type<out int type>
 248   =  BasicType<out type>
 249      [ "[]"                                  (. type++; .)
 250      ] .
 251 
 252 
 253   BasicType<out int type>         (. type = Types.noType; .)
 254   =   "int"                       (. type = Types.intType; .)
 255     | "bool"                      (. type = Types.boolType; .)
 256     | "char"                      (. type = Types.charType; .)
 257   .
 258 
 259 
 260   VarList<StackFrame frame, int type>
 261   =  OneVar<frame, type>
 262      { WEAK "," OneVar<frame, type> }
 263   .
 264 
 265   OneVar<StackFrame frame, int type>    (. int expType;
 266                                    Entry var = new Entry(); .)
 267   =  Ident<out var.name>           (. var.kind = Kinds.Var;
 268                                       var.type = type;
 269                                       var.offset = frame.size;
 270                                       frame.size++; .)
 271      [ AssignOp                (. CodeGen.LoadAddress(var); .)
 272        Expression<out expType>   (. if (!Assignable(var.type,
 273 							 expType))
 274                  SemError("incompatible types in assignment");
 275                                   CodeGen.Assign(var.type); .)
 276      ]                                (. Table.Insert(var); .)
 277   .
 278 
 279 
 280   AssignmentOrCall                     (. int expType;
 281                                           DesType des; .)
 282   =  (  IF (IsCall(out des)) // resolver handles LL1 conflict
 283          identifier               (. CodeGen.FrameHeader(); .)
 284          "(" Arguments<des> ")"   (. CodeGen.Call
 285 						    (des.entry.entryPoint); .)
 286       |  Designator<out des>      (. if (des.entry.kind !=
 287 								 Kinds.Var)
 288                          		SemError("cannot assign to " + 
 289 				    Kinds.kindNames[des.entry.kind]); .)
 290          AssignOp
 291          Expression<out expType>  (. if (!Assignable(des.type,
 292 							 expType))
 293                                 SemError("incompatible types in assignment");
 294                                 CodeGen.Assign(des.type); .)
 295      ) WEAK ";"
 296   .
 297 
 298   Arguments<DesType des>        (. int argCount = 0;
 299                            Entry fp = des.entry.firstParam; .)
 300   =  [ OneArg<fp>               (. argCount++; if (fp != null)
 301 							 fp = fp.nextInScope; .)
 302        { WEAK "," OneArg<fp>    (. argCount++; if (fp != null)
 303 							 fp = fp.nextInScope;.)
 304        }
 305      ]                          (. if (argCount !=
 306 								 des.entry.nParams)
 307                      SemError("wrong number of arguments"); .)
 308   .
 309 
 310   OneArg<Entry fp>                 (. int argType; .)
 311   =  (  Expression<out argType>    (. if (fp != null && 
 312 						!Assignable(fp.type, argType))
 313                         SemError("argument type mismatch"); .)
 314      )
 315   .
 316 
 317   Designator<out DesType des>           (. string name;
 318                                            int indexType; .)
 319   =  Ident<out name>        (. Entry entry = Table.Find(name);
 320                                if (!entry.declared)
 321                            SemError("undeclared identifier");
 322                                des = new DesType(entry);
 323                                if (entry.kind == Kinds.Var)
 324                                 CodeGen.LoadAddress(entry); .)
 325      [  "["              	 (. if (IsArray(des.type))
 326 							 des.type--;
 327                         		else 
 328 					  SemError("unexpected subscript");
 329                                if (des.entry.kind !=
 330 								 Kinds.Var)
 331                              SemError("unexpected subscript"); 
 332                                CodeGen.Dereference(); .)
 333         Expression<out indexType>  (. if (!IsArith(indexType))
 334                            SemError("invalid subscript type");
 335                                       CodeGen.Index(); .)
 336 
 337            "]"
 338      ]
 339   .
 340 
 341   IfStatement<StackFrame frame>
 342                    			  (. Label falseLabel = 
 343 							new Label(!known); 
 344 							   Label endLabel= new Label(!known);
 345 							.)
 346   =  "if" "(" Condition ")"
 347      ["then"                    (. SemError("found 'then' in if statement"); .)
 348      ]      
 349                                 (. CodeGen.BranchFalse(falseLabel); .)
 350         Statement<frame>          (. CodeGen.Branch(endLabel);  .)
 351      ["else" (.falseLabel.Here(); .) Statement<frame> ]  (. endLabel.Here(); .)
 352   .
 353 
 354   WhileStatement<StackFrame frame>    (. Label loopExit  =
 355 								 new Label(!known);
 356                                          Label loopStart =
 357 							    new Label(known); .)
 358   =  "while" "(" Condition ")"        (. CodeGen.BranchFalse
 359 								(loopExit); .)
 360      Statement<frame>                 (. CodeGen.Branch
 361 								(loopStart);
 362                                          loopExit.Here(); .)
 363   .
 364 
 365   DoWhileStatement<StackFrame frame>    (. Label loopExit  =
 366 								 new Label(!known);
 367                                          Label loopStart =
 368 							    new Label(known); .)
 369   =  "do"  
 370      Statement<frame>           
 371 								
 372                                          
 373     "while" "(" Condition ")"        (. CodeGen.BranchFalse
 374 								(loopExit); CodeGen.Branch(loopStart); loopExit.Here(); .)
 375   .
 376 
 377 
 378   RepeatStatement<StackFrame frame>  
 379                                          (. Label loopStart =
 380 							    new Label(known); .)
 381   =  "repeat"         
 382      RepeatBlock<frame>        
 383                             
 384      "until" "(" Condition ")" ";" (. CodeGen.BranchFalse
 385 							   (loopStart); .)
 386   .
 387 
 388   SwitchStatement<StackFrame frame>       (. int expType; .)
 389   = "switch"
 390     "(" Expression<out expType>
 391     ")" "{"
 392       { CaseLabelList
 393         Statement<frame>
 394         { Statement<frame>
 395         } }
 396       [ "default" ":"
 397         { Statement<frame>
 398         } ]
 399     "}"
 400   .
 401 
 402   CaseLabelList
 403   = CaseLabel { CaseLabel }
 404   .
 405 
 406   CaseLabel                              	(. ConstRec con; .)
 407   = "case" [ "+" | "-" ]
 408     Constant<out con>
 409     ":"
 410   .
 411 
 412   HaltStatement
 413   =  "halt" "(" [WriteList] ")"                      (. CodeGen.WriteLine(); CodeGen.LeaveProgram(); .)
 414      WEAK ";"
 415   .
 416 
 417   ReturnStatement
 418   =  "return"               (. CodeGen.LeaveVoidFunction(); .)
 419      WEAK ";"
 420   .
 421 
 422   ReadStatement
 423   = "read" "(" ReadList ")" WEAK ";" | 
 424   "readLine" "(" [ReadList]")" WEAK ";" (. CodeGen.ReadLine(); .) 
 425   .
 426 
 427   ReadList
 428   = ReadElement { WEAK "," ReadElement }
 429   .
 430 
 431   ReadElement                        (. string str;
 432                                         DesType des; .)
 433   =   StringConst<out str>     (. CodeGen.WriteString(str); .)
 434     | Designator<out des>            (. if (des.entry.kind !=
 435 								 Kinds.Var)
 436                          SemError("wrong kind of identifier");
 437                                   switch (des.type) {
 438                                     case Types.intType:
 439                                     case Types.boolType:
 440                                     case Types.charType:
 441                                        CodeGen.Read(des.type);
 442 							  break;
 443                                     default:
 444                             SemError("cannot read this type");
 445 							  break;
 446                                                     } .)
 447   .
 448 
 449 
 450   WriteStatement
 451   =  "write" "(" WriteList ")" WEAK ";" 
 452    | ("writeLine" "(" [WriteList] ")" WEAK ";") (. CodeGen.WriteLine(); .)
 453   .
 454 
 455   WriteList
 456   = (WriteElement { WEAK "," WriteElement }) 
 457   .
 458 
 459   WriteElement                  (. int expType; string str;.)
 460   =   StringConst<out str>      (. CodeGen.WriteString(str);.)
 461     | Expression<out expType>   (. if (!(IsArith(expType) ||
 462 						          expType == Types.boolType))
 463                                   SemError("cannot write this type");
 464                                   switch (expType) {
 465                                       case Types.intType:
 466                                       case Types.boolType:
 467                                       case Types.charType:
 468                                      CodeGen.Write(expType);
 469 							break;
 470                                    default:  break;
 471                                                     } .)
 472   .
 473 
 474   Condition                       (. int type; .)
 475   =  Expression<out type>         (. if (!IsBool(type))
 476                      SemError("Boolean expression needed");.)
 477   .
 478 
 479   Expression<out int type>        (. int type2;
 480                     Label shortcircuit = new Label(!known); .)
 481   =  AndExp<out type>
 482      { "||"                       (. CodeGen.BooleanOp
 483 						(shortcircuit, CodeGen.or); .)
 484        AndExp<out type2>          (. if (!IsBool(type) || 
 485 								!IsBool(type2))
 486                           SemError("Boolean operands needed");
 487                                      type = Types.boolType; .)
 488      }                            (. shortcircuit.Here(); .)
 489       
 490   .
 491 
 492   AndExp<out int type>            (. int type2;
 493                                      Label shortcircuit = new
 494 								 Label(!known); .)
 495   =  EqlExp<out type>
 496      { "&&"                       (. CodeGen.BooleanOp
 497 					(shortcircuit, CodeGen.and); .)
 498        EqlExp<out type2>          (. if (!IsBool(type) || 
 499 							!IsBool(type2))
 500                        SemError("Boolean operands needed");
 501                                      type = Types.boolType; .)
 502      }                            (. shortcircuit.Here(); .)
 503   .
 504 
 505   EqlExp<out int type>            (. int type2;
 506                                      int op; .)
 507   =  RelExp<out type>
 508      { EqualOp<out op>
 509        RelExp<out type2>      (. if (!Compatible(type, type2))
 510                        SemError("incomparable operand types");
 511                                  CodeGen.Comparison(op, type);
 512                                  type = Types.boolType; .)
 513      }
 514   .
 515 
 516   RelExp<out int type>           (. int type2; int op; .)
 517   =  AddExp<out type>
 518      [ RelOp<out op>
 519        AddExp<out type2>         (. if (!IsArith(type) || 
 520 								!IsArith(type2))
 521                     SemError("incomparable operand types");
 522                                  CodeGen.Comparison(op, type);
 523                                  type = Types.boolType; .)
 524      ]
 525   .
 526 
 527   AddExp<out int type>           (. int type2; int op; .)
 528   =  MultExp<out type>
 529      { AddOp<out op>
 530        MultExp<out type2>        (. if (IsArith(type) &&
 531 							 IsArith(type2)) {
 532                                       type = Types.intType;
 533                                       CodeGen.BinaryOp(op);
 534                                      }
 535                                     else {
 536                        SemError("arithmetic operands needed");
 537                                           type = Types.noType;
 538                                          } .)
 539      }
 540   .
 541 
 542   MultExp<out int type>           (. int type2; int op; .)
 543   =  Factor<out type>
 544      { MulOp<out op>
 545        Factor<out type2>          (. if (IsArith(type) &&
 546 							   IsArith(type2)) {
 547                                        type = Types.intType;
 548                                        CodeGen.BinaryOp(op);
 549                                        }
 550                                       else {
 551                        SemError("arithmetic operands needed");
 552                                           type = Types.noType;
 553                                            } .)
 554      }
 555   .
 556 
 557   Factor<out int type>              (. type = Types.noType; .)
 558   =    Primary<out type>
 559      | "+" Factor<out type>         (. if (!IsArith(type)) {
 560                         SemError("arithmetic operand needed");
 561                                           type = Types.noType;
 562                                         }
 563                                        else 
 564 							type = Types.intType; .)
 565      | "-" Factor<out type>         (. if (!IsArith(type)) {
 566                         SemError("arithmetic operand needed");
 567                                           type = Types.noType;
 568                                         }
 569                                        else
 570 							   type = Types.intType;
 571                                     CodeGen.NegateInteger();.)
 572      | "!" Factor<out type>     (. if (!IsBool(type))
 573                            SemError("Boolean operand needed");
 574                                    type = Types.boolType;
 575                                    CodeGen.NegateBoolean(); .)
 576   .
 577   
 578   MaxMin<out int type>                      (. int count = 0; type = Types.noType; .) 
 579   = "Max" "(" Expression<out type>          (. count++; .)
 580     {"," Expression<out type>               (. count++; .)
 581 	} ")"                                   (. CodeGen.MaxMin("MAX",count); .)
 582 	| "Min" "(" Expression<out type>        (. count++; .)
 583     {"," Expression<out type>               (. count++; .)
 584 	} ")"                                   (. CodeGen.MaxMin("MIN",count); .)
 585   . 
 586   
 587   Sqr<out int type>                        (. type = Types.noType; .)
 588   = "Sqr" "(" Expression<out type> ")"      (. CodeGen.OneWord("sqr"); .)
 589   .
 590 
 591   Primary<out int type>         (. type = Types.noType;
 592                                    int size;
 593                                    DesType des;
 594                                    ConstRec con; .)
 595   =    Designator<out des>      (. type = des.type;
 596                                    switch (des.entry.kind) {
 597                                     case Kinds.Var:
 598                                         CodeGen.Dereference();
 599                                         break;
 600                                     case Kinds.Con:
 601                         CodeGen.LoadConstant(des.entry.value);
 602                                         break;
 603                                     default:
 604                          SemError("wrong kind of identifier");
 605                                         break;
 606                                     } .)
 607      | Constant<out con>        (. type = con.type;
 608                             CodeGen.LoadConstant(con.value); .)
 609      | "new"
 610        (   BasicType<out type>
 611            "[" Expression<out size>    (. if (!IsArith(size))
 612                        SemError("array size must be integer");
 613                                           type++; .)
 614            "]"
 615        )                             (. CodeGen.Allocate(); .)
 616 
 617      | "("
 618        (   "char" ")"
 619            Factor<out type>     	     (. if (!IsArith(type))
 620                                      SemError("invalid cast");
 621                                        else 
 622 							  type = Types.charType;
 623                                       CodeGen.CastToChar(); .)
 624          | "int" ")"
 625            Factor<out type>          (. if (!IsArith(type))
 626                                      SemError("invalid cast");
 627                                        else 
 628 							type = Types.intType; .)
 629          | Expression<out type> ")"
 630        )
 631 	 | MaxMin <out type>
 632 	 | Sqr <out type>
 633   .
 634 
 635   AddOp<out int op>                   	(. op = CodeGen.nop; .)
 636   =    "+"                            (. op = CodeGen.add; .)
 637      | "-"                            (. op = CodeGen.sub; .)
 638   .
 639 
 640   MulOp<out int op>                   (. op = CodeGen.nop; .)
 641   =    "*"                            (. op = CodeGen.mul; .)
 642      | "/"                            (. op = CodeGen.div; .)
 643      | "%"                            (. op = CodeGen.rem; .)
 644   .
 645 
 646   EqualOp<out int op>                 (. op = CodeGen.nop; .)
 647   =    "=="                           (. op = CodeGen.ceq; .)
 648      | "!="                           (. op = CodeGen.cne; .)
 649 	 | "="                            (. SemError("found '=' instead of '=='");
 650                                          op = CodeGen.ceq;	 .)
 651 	 | "<>"                           (. SemError("found '<>' instead of '!='");
 652                                          op = CodeGen.cne; .)
 653   .
 654 
 655   RelOp<out int op>                   (. op = CodeGen.nop; .)
 656   =    "<"                            (. op = CodeGen.clt; .)
 657      | "<="                           (. op = CodeGen.cle; .)
 658      | ">"                            (. op = CodeGen.cgt; .)
 659      | ">="                           (. op = CodeGen.cge; .)
 660   .
 661 
 662   AssignOp = "=" | ":=" (. SemError("found ':=' instead of '='"); .)
 663   .
 664 
 665   Ident<out string name>
 666   =  identifier                       (. name = token.val; .)
 667   .
 668 
 669   StringConst<out string str>
 670   =  stringLit                        (. str = token.val;
 671                                          str = Unescape
 672 				(str.Substring(1, str.Length - 2)); .)
 673   .
 674 
 675   CharConst<out int value>
 676   =  charLit                        (. string str = token.val;
 677                                        str = Unescape
 678 					(str.Substring(1, str.Length - 2));
 679                                        value = str[0]; .)
 680   .
 681 
 682   IntConst<out int value>
 683   =  number                         (. try {value =
 684 						 Convert.ToInt32(token.val);
 685                                        } catch (Exception) {
 686                                          value = 0; 
 687 					SemError("number out of range");
 688 			
 689                                              } .)
 690   .
 691 
 692 END Parva.
 693 

0 errors detected
4 warnings detected
